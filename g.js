// == –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫ v2.0 ==
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
//             —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏.
// –í–Ω–µ–¥—Ä–µ–Ω–∏–µ: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)
//            –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
// –ê–≤—Ç–æ—Ä: –í–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –í—ã
// --------------------------------------

(function() {
    'use strict';

    // --- ------------------------------------------------------------------- ---
    // --- --------- –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–†–ò–ü–¢–ê (–í—Å–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å) ---------- ---
    // --- ------------------------------------------------------------------- ---
    const CONFIG = {
        // --- –û–±—â–∏–µ UI –∏ –°—Ç–∏–ª–∏ ---
        UI_CONTAINER_ID: 'productionHelperUI_v2',
        UI_BOTTOM_OFFSET: '10px',
        UI_RIGHT_OFFSET: '10px',
        UI_WIDTH_PERCENT_VIEWPORT: 75,      // –®–∏—Ä–∏–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI –≤ % –æ—Ç —à–∏—Ä–∏–Ω—ã –æ–∫–Ω–∞ (–±—ã–ª–æ 70)
        UI_HEIGHT_PERCENT_VIEWPORT: 22,     // –í—ã—Å–æ—Ç–∞ UI –≤ % (–±—ã–ª–æ 18, —É–≤–µ–ª–∏—á–∏–ª –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª-—Ç–æ–≤)
        UI_MIN_HEIGHT_PX: 180,              // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ UI (–±—ã–ª–æ 120)
        UI_BACKGROUND_COLOR: 'rgba(30, 35, 45, 0.8)', // –¢–µ–º–Ω–æ-—Å–∏–Ω–µ-—Å–µ—Ä—ã–π, —á—É—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ
        UI_TEXT_COLOR: 'rgba(230, 230, 240, 0.9)',
        UI_BORDER_COLOR: 'rgba(80, 120, 220, 0.8)',
        FONT_FAMILY: '"Segoe UI", Roboto, Arial, sans-serif',
        CLICKER_BUTTON_COLOR: 'rgba(255, 100, 0, 0.85)', // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è "–ø–ª—é—Å–∞"
        DECREMENT_BUTTON_COLOR: 'rgba(200, 60, 60, 0.8)', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è "–º–∏–Ω—É—Å–∞"
        MAIN_ACCENT_COLOR: 'rgba(255, 160, 0, 0.9)',      // –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)

        // --- –ö–Ω–æ–ø–∫–∞ –°–≤–µ—Ä–Ω—É—Ç—å/–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å ---
        EMERGENCY_HIDE_BUTTON_TEXT: '–°–ö–†–´–¢–¨ –≠–¢–£ –ü–ê–ù–ï–õ–¨!', // –ö–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        EMERGENCY_SHOW_BUTTON_TEXT: 'üõ†Ô∏è',
        EMERGENCY_SHOW_BUTTON_SIZE: '30px',
        EMERGENCY_SHOW_BUTTON_OPACITY: 0.3,

        // --- –ö–ª–∏–∫–µ—Ä –∏ –°—á–µ—Ç—á–∏–∫ ---
        MAIN_COUNTER_INPUT_ID: 'mainProdCounterInput',   // –¢–µ–ø–µ—Ä—å —ç—Ç–æ input
        CLICKER_INCREMENT_BUTTON_ID: 'incrementProdBtn',
        CLICKER_DECREMENT_BUTTON_ID: 'decrementProdBtn', // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        INCREMENT_KEYBOARD_SHORTCUT: 'PageDown',         // –ö–ª–∞–≤–∏—à–∞ –¥–ª—è +1

        // --- –ß–∞—Å—ã (–≤–Ω—É—Ç—Ä–∏ UI) ---
        CLOCK_DISPLAY_ID: 'prodRealTimeClock_v2',

        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–º–µ–Ω—ã ---
        DEFAULT_DAY_SHIFT_START_TIME: '07:15',
        DEFAULT_NIGHT_SHIFT_START_TIME: '19:15', // –î–ª—è –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω, –µ—Å–ª–∏ –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        SETTINGS_SHIFT_TYPE_SELECT_ID: 'shiftTypeSelect_v2',
        SETTINGS_SHIFT_START_TIME_INPUT_ID: 'shiftStartTimeInput_v2',

        // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –û–±–µ–¥–∞ ---
        SETTINGS_LUNCH_TIME_SELECT_ID: 'lunchTimeSelect_v2',
        DEFAULT_LUNCH_OPTIONS: [ // –û–±–µ–¥ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å, –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            { text: "–û–±–µ–¥ 1 (10:30-11:00)", start: "10:30", end: "11:00" },
            { text: "–û–±–µ–¥ 2 (11:00-11:30)", start: "11:00", end: "11:30" },
            { text: "–û–±–µ–¥ 3 (11:30-12:00)", start: "11:30", end: "12:00" },
            { text: "–û–±–µ–¥ 4 (12:00-12:30)", start: "12:00", end: "12:30" },
            { text: "–û–±–µ–¥ –ù–æ—á—å (22:30-23:00)", start: "22:30", end: "23:00" },
            { text: "–î—Ä—É–≥–æ–π (—É–∫–∞–∑–∞—Ç—å –≤ –∫–æ–¥–µ)" , start: "00:00", end: "00:00"}, // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        ],
        DEFAULT_LUNCH_INDEX: 0, // –ò–Ω–¥–µ–∫—Å –æ–±–µ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ

        // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        STATS_TEXT_SUMMARY_ID: 'prodStatsSummary_v2',    // –û–±—â–∏–π –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        STATS_UPDATE_INTERVAL_MS: 5000,      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞

        // --- –ì—Ä–∞—Ñ–∏–∫ –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –°–º–µ–Ω—É ---
        SHIFT_PROGRESS_GRAPH_ID: 'shiftProgressGraph_v2',
        SHIFT_PROGRESS_GRAPH_HEIGHT_PX: 80, // –£–≤–µ–ª–∏—á–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        GRAPH_LINE_COLOR: 'rgba(255, 165, 0, 0.9)',       // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        GRAPH_TARGET_RATE_LINES: [                        // –¶–µ–ª–µ–≤—ã–µ –ª–∏–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–¥–º–µ—Ç–æ–≤/—á–∞—Å)
            { rate: 10, color: 'rgba(100, 100, 255, 0.5)', label: '10/—á' },
            { rate: 20, color: 'rgba(100, 200, 100, 0.5)', label: '20/—á' },
            { rate: 30, color: 'rgba(255, 100, 100, 0.5)', label: '30/—á' }
        ],
        GRAPH_X_AXIS_TIME_MARKERS_COUNT: 6, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏ X

        // --- –ê–≤—Ç–æ-–ö–ª–∏–∫–µ—Ä –ø–æ –¢—Ä–∏–≥–≥–µ—Ä—É ---
        AUTO_CLICK_TRIGGER_WORD: 'MOgoskury',             // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        TRIGGER_OBSERVE_AREA_SELECTOR: 'body',            // –°–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. 'body' - –≤—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
                                                          // –ú–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: 'div#operationResultDisplay'
        AUTO_CLICK_ENABLED_CHECKBOX_ID: 'autoClickEnabled_v2',

        // --- –ü–æ–ª–µ –¥–ª—è –ó–∞–º–µ—Ç–æ–∫ —Å –ò—Å—Ç–æ—Ä–∏–µ–π ---
        NOTES_INPUT_ID: 'prodNotesInput_v2',
        NOTES_HISTORY_DISPLAY_ID: 'prodNotesHistory_v2',
        MAX_NOTES_HISTORY_ITEMS: 15,

        // --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
        STORAGE_KEY_PREFIX: 'prodHelper_data_v2.1_',
        USE_SESSION_STORAGE: true, // true = sessionStorage (–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞), false = localStorage

        // --- UI –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –ü–∞–Ω–µ–ª—å –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
        LOCK_UI_BUTTON_TEXT_UNLOCKED: 'üîì –ë–ª–æ–∫. UI',
        LOCK_UI_BUTTON_TEXT_LOCKED: 'üîí –†–∞–∑–±–ª–æ–∫.',
        SETTINGS_PANEL_ID: 'prodHelperSettingsPanel_v2',
        TOGGLE_SETTINGS_BUTTON_TEXT_CLOSED: '–ù–ê–°–¢–†–û–ô–ö–ò ‚öôÔ∏è', // –ö–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        TOGGLE_SETTINGS_BUTTON_TEXT_OPENED: '–ù–ê–°–¢–†–û–ô–ö–ò ‚óÄ',

        DEBUG_MODE: true, // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–æ–ø. –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    };

    // --- ------------------------------------------------------------------- ---
    // --- --------- –°–û–°–¢–û–Ø–ù–ò–ï –°–ö–†–ò–ü–¢–ê (–ù–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑–≤–Ω–µ) ---------- ---
    // --- ------------------------------------------------------------------- ---
    const state = {
        uiVisible: true,
        uiLocked: false,
        settingsPanelVisible: false,
        totalClicks: 0,
        shiftType: 'auto', // 'auto', 'day', 'night'
        shiftStartTime: null,
        selectedLunchOption: CONFIG.DEFAULT_LUNCH_OPTIONS[CONFIG.DEFAULT_LUNCH_INDEX],
        autoClickEnabled: true,
        sessionStartTimestamp: Date.now(),
        isMOgoskuryCurrentlyVisible: false, // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        clickedForThisMOgoskuryInstance: false, // –§–ª–∞–≥, —á—Ç–æ —É–∂–µ –∫–ª–∏–∫–Ω—É–ª–∏ –∑–∞ —ç—Ç–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        notesHistory: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–æ–∫
        clickDataForGraph: [], // [{ timestamp: Date, count: number (cumulative) }]
        domElements: {},
        intervals: {},
        mutationObserver: null,
        pageKeydownListener: null,
    };

    // --- ------------------------------------------------------------------- ---
    // --- --------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ------------------- ---
    // --- ------------------------------------------------------------------- ---
    function logDebug(...args) { if (CONFIG.DEBUG_MODE) console.debug('[ProdHelper V2 DEBUG]', ...args); }
    function logInfo(...args) { console.info('[ProdHelper V2 INFO]', ...args); }
    function logError(...args) { console.error('[ProdHelper V2 ERROR]', ...args); }

    function getStorage() { return CONFIG.USE_SESSION_STORAGE ? sessionStorage : localStorage; }

    function saveDataToStorage() {
        try {
            const storage = getStorage();
            const lunchIndex = CONFIG.DEFAULT_LUNCH_OPTIONS.findIndex(
                opt => opt.start === state.selectedLunchOption.start && opt.end === state.selectedLunchOption.end
            );
            const dataToSave = {
                totalClicks: state.totalClicks,
                shiftType: state.shiftType,
                shiftStartTimeISO: state.shiftStartTime ? state.shiftStartTime.toISOString() : null,
                selectedLunchOptionIndex: lunchIndex > -1 ? lunchIndex : CONFIG.DEFAULT_LUNCH_INDEX,
                autoClickEnabled: state.autoClickEnabled,
                uiVisible: state.uiVisible,
                uiLocked: state.uiLocked,
                settingsPanelVisible: state.settingsPanelVisible,
                notesHistory: state.notesHistory.slice(-CONFIG.MAX_NOTES_HISTORY_ITEMS), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–º–µ—Ç–æ–∫
                clickDataForGraph: state.clickDataForGraph, // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            };
            storage.setItem(CONFIG.STORAGE_KEY_PREFIX + 'data', JSON.stringify(dataToSave));
            logDebug('Data saved to storage:', dataToSave);
        } catch (e) { logError('Failed to save data:', e); }
    }

    function loadDataFromStorage() {
        try {
            const storage = getStorage();
            const savedDataJSON = storage.getItem(CONFIG.STORAGE_KEY_PREFIX + 'data');
            if (savedDataJSON) {
                const savedData = JSON.parse(savedDataJSON);
                state.totalClicks = parseInt(savedData.totalClicks, 10) || 0;
                state.shiftType = savedData.shiftType || 'auto';
                if (savedData.shiftStartTimeISO) state.shiftStartTime = new Date(savedData.shiftStartTimeISO);

                const lunchIndex = parseInt(savedData.selectedLunchOptionIndex, 10);
                state.selectedLunchOption = (!isNaN(lunchIndex) && CONFIG.DEFAULT_LUNCH_OPTIONS[lunchIndex])
                    ? CONFIG.DEFAULT_LUNCH_OPTIONS[lunchIndex]
                    : CONFIG.DEFAULT_LUNCH_OPTIONS[CONFIG.DEFAULT_LUNCH_INDEX];

                state.autoClickEnabled = typeof savedData.autoClickEnabled === 'boolean' ? savedData.autoClickEnabled : true;
                state.uiVisible = typeof savedData.uiVisible === 'boolean' ? savedData.uiVisible : true;
                state.uiLocked = typeof savedData.uiLocked === 'boolean' ? savedData.uiLocked : false;
                state.settingsPanelVisible = typeof savedData.settingsPanelVisible === 'boolean' ? savedData.settingsPanelVisible : false;
                state.notesHistory = Array.isArray(savedData.notesHistory) ? savedData.notesHistory : [];
                state.clickDataForGraph = Array.isArray(savedData.clickDataForGraph)
                    ? savedData.clickDataForGraph.map(d => ({ timestamp: new Date(d.timestamp), count: d.count }))
                    : [];
                logInfo('Data loaded from storage.');
            } else {
                logInfo('No saved data. Initializing defaults.');
            }
             // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã, –∏–ª–∏ –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö
            if (!state.shiftStartTime || !(state.shiftStartTime instanceof Date) || isNaN(state.shiftStartTime.getTime())) {
                determineAndSetShiftStartTime(true); // true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            }

        } catch (e) {
            logError('Failed to load data:', e);
            determineAndSetShiftStartTime(true); // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        }
    }
    // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: timeHHMMToMinutes, formatDateToHHMM, formatMsToDuration, createDOMElement - –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –Ω–æ–≤—ã–º createDOMElement)

    function timeHHMMToMinutes(timeStr) {
        if (!timeStr || !timeStr.includes(':')) return 0;
        const [hours, minutes] = timeStr.split(':').map(Number);
        return hours * 60 + minutes;
    }

    function formatDateToHHMM(dateObj, includeSeconds = false) {
        if (!dateObj || !(dateObj instanceof Date) || isNaN(dateObj.getTime())) return "N/A";
        const h = String(dateObj.getHours()).padStart(2, '0');
        const m = String(dateObj.getMinutes()).padStart(2, '0');
        if (includeSeconds) {
            const s = String(dateObj.getSeconds()).padStart(2, '0');
            return `${h}:${m}:${s}`;
        }
        return `${h}:${m}`;
    }

    function formatMsToDuration(ms) {
        if (isNaN(ms) || ms < 0) ms = 0;
        const totalSeconds = Math.floor(ms / 1000);
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        return `${String(hours).padStart(2, '0')}—á ${String(minutes).padStart(2, '0')}–º`;
    }

    function createDOMElement(tag, attributes = {}, children = []) {
        const element = document.createElement(tag);
        for (const key in attributes) {
            if (key === 'style' && typeof attributes[key] === 'object') {
                Object.assign(element.style, attributes[key]);
            } else if (key === 'dataset' && typeof attributes[key] === 'object') {
                 Object.assign(element.dataset, attributes[key]);
            } else if (['textContent', 'innerHTML', 'value', 'checked', 'disabled', 'type', 'id', 'title', 'placeholder', 'tabIndex'].includes(key)) {
                element[key] = attributes[key];
            } else {
                element.setAttribute(key, attributes[key]);
            }
        }
        children.forEach(child => {
            if (typeof child === 'string') {
                element.appendChild(document.createTextNode(child));
            } else if (child instanceof Node) {
                element.appendChild(child);
            }
        });
        return element;
    }


    // --- ------------------------------------------------------------------- ---
    // --- ----------------------- –°–ë–û–†–ö–ê UI –≠–õ–ï–ú–ï–ù–¢–û–í --------------------- ---
    // --- ------------------------------------------------------------------- ---

    function buildMainUI() {
        if (document.getElementById(CONFIG.UI_CONTAINER_ID)) {
            logError('UI container already exists. Aborting UI build.');
            return;
        }

        const uiContainer = createDOMElement('div', {
            id: CONFIG.UI_CONTAINER_ID,
            style: {
                position: 'fixed', bottom: CONFIG.UI_BOTTOM_OFFSET, right: CONFIG.UI_RIGHT_OFFSET,
                width: `${CONFIG.UI_WIDTH_PERCENT_VIEWPORT}vw`, height: `${CONFIG.UI_HEIGHT_PERCENT_VIEWPORT}vh`,
                minHeight: `${CONFIG.UI_MIN_HEIGHT_PX}px`, backgroundColor: CONFIG.UI_BACKGROUND_COLOR,
                border: `2px solid ${CONFIG.UI_BORDER_COLOR}`, borderRadius: '12px', // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–¥–∏—É—Å
                boxSizing: 'border-box', color: CONFIG.UI_TEXT_COLOR, fontFamily: CONFIG.FONT_FAMILY,
                zIndex: '999999998', // –ß—É—Ç—å –Ω–∏–∂–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ø–æ–∫–∞–∑–∞—Ç—å"
                display: 'flex', flexDirection: 'column', padding: '10px 15px', // –£–≤–µ–ª–∏—á–∏–ª padding
                overflow: 'hidden', boxShadow: '0 5px 30px rgba(0,0,0,0.5)', // –£—Å–∏–ª–∏–ª —Ç–µ–Ω—å
                transition: 'opacity 0.3s ease-out, transform 0.3s ease-out'
            }
        });
        state.domElements.uiContainer = uiContainer;

        // --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –°–∫—Ä—ã—Ç–∏–µ) ---
        const topControlsStyle = { display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginBottom: '8px', flexShrink: 0 };
        const topControls = createDOMElement('div', { style: topControlsStyle });
        const commonButtonStyle = {
            cursor: 'pointer', background: 'rgba(255,255,255,0.05)', border: `1px solid ${CONFIG.UI_BORDER_COLOR}`,
            color: CONFIG.UI_TEXT_COLOR, borderRadius: '6px', padding: '5px 10px', fontSize: '0.85em',
            marginLeft: '8px', transition: 'background-color 0.2s, border-color 0.2s, color 0.2s'
        };
        commonButtonStyle[':hover'] = { backgroundColor: 'rgba(255,255,255,0.15)' }; // –ü—Å–µ–≤–¥–æ-—Ö–æ–≤–µ—Ä

        state.domElements.toggleSettingsButton = createDOMElement('button', {
            id: CONFIG.TOGGLE_SETTINGS_BUTTON_ID, textContent: CONFIG.TOGGLE_SETTINGS_BUTTON_TEXT_CLOSED,
            title: '–û—Ç–∫—Ä—ã—Ç—å/–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫', style: commonButtonStyle
        });
        state.domElements.toggleSettingsButton.addEventListener('click', toggleSettingsPanelVisibility);

        state.domElements.lockUIButton = createDOMElement('button', {
            id: 'lockProdUIBtn_v2', textContent: CONFIG.LOCK_UI_BUTTON_TEXT_UNLOCKED,
            title: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI (–∫—Ä–æ–º–µ –∫–ª–∏–∫–µ—Ä–∞)', style: commonButtonStyle
        });
        state.domElements.lockUIButton.addEventListener('click', toggleUILockState);

        state.domElements.emergencyHideButton = createDOMElement('button', {
            id: 'hideProdUIBtn_v2', textContent: CONFIG.EMERGENCY_HIDE_BUTTON_TEXT,
            title: '–°–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', style: { ...commonButtonStyle, backgroundColor: 'rgba(200, 80, 80, 0.4)' }
        });
        state.domElements.emergencyHideButton.addEventListener('click', () => setUIVisibility(false));

        topControls.append(state.domElements.toggleSettingsButton, state.domElements.lockUIButton, state.domElements.emergencyHideButton);
        uiContainer.appendChild(topControls);

        // --- –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å (–õ–µ–≤–æ: –ö–ª–∏–∫–µ—Ä+–ó–∞–º–µ—Ç–∫–∏, –ü—Ä–∞–≤–æ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞+–ì—Ä–∞—Ñ–∏–∫) ---
        const mainWorkspace = createDOMElement('div', {
            style: { display: 'flex', flexGrow: 1, gap: '15px', overflow: 'hidden', position: 'relative' }
        });

        // --- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ö–ª–∏–∫–µ—Ä –∏ –ó–∞–º–µ—Ç–∫–∏) ---
        const leftColumn = createDOMElement('div', {
            style: { display: 'flex', flexDirection: 'column', flexBasis: '40%', // –ß—É—Ç—å –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –∫–ª–∏–∫–µ—Ä—É
                       borderRight: `1px solid rgba(255,255,255,0.15)`, paddingRight: '15px' }
        });

        // –ó–æ–Ω–∞ –ö–ª–∏–∫–µ—Ä–∞ (—Å–≤–µ—Ä—Ö—É –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
        const clickerArea = createDOMElement('div', {
            style: { display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: '15px' }
        });
        state.domElements.mainCounterInput = createDOMElement('input', {
            type: 'number', id: CONFIG.MAIN_COUNTER_INPUT_ID, value: state.totalClicks,
            style: {
                fontSize: '3.8em', fontWeight: 'bold', color: CONFIG.MAIN_ACCENT_COLOR, marginBottom: '10px',
                textAlign: 'center', background: 'none', border: 'none', borderBottom: `2px solid ${CONFIG.MAIN_ACCENT_COLOR}55`,
                width: '180px', padding: '5px 0', outline: 'none',
            }
        });
        state.domElements.mainCounterInput.addEventListener('change', handleCounterInputChange);
        state.domElements.mainCounterInput.addEventListener('input', (e) => { // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–µ-—Ü–∏—Ñ—Ä
            e.target.value = e.target.value.replace(/[^0-9]/g, '');
        });


        const clickerButtonsContainer = createDOMElement('div', { style: { display: 'flex', alignItems: 'center' } });
        state.domElements.decrementButton = createDOMElement('button', {
            id: CONFIG.CLICKER_DECREMENT_BUTTON_ID, textContent: '‚ûñ', title: '–£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (-1)',
            style: {
                padding: '10px 15px', fontSize: '1.5em', cursor: 'pointer', marginRight: '10px',
                backgroundColor: CONFIG.DECREMENT_BUTTON_COLOR, color: 'white', border: 'none', borderRadius: '8px',
                boxShadow: '0 2px 5px rgba(0,0,0,0.2)', transition: 'transform 0.1s'
            }
        });
        state.domElements.decrementButton.addEventListener('click', handleDecrementClick);
        makeButtonInteractive(state.domElements.decrementButton);

        state.domElements.incrementButton = createDOMElement('button', {
            id: CONFIG.CLICKER_INCREMENT_BUTTON_ID, textContent: '‚úö', title: `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å (+1) –∏–ª–∏ ${CONFIG.INCREMENT_KEYBOARD_SHORTCUT}`,
            style: {
                padding: '15px 25px', fontSize: '2.5em', fontWeight: 'bold', cursor: 'pointer',
                backgroundColor: CONFIG.CLICKER_BUTTON_COLOR, color: 'white', border: 'none', borderRadius: '10px',
                boxShadow: '0 3px 7px rgba(0,0,0,0.25)', transition: 'transform 0.1s'
            }
        });
        state.domElements.incrementButton.addEventListener('click', () => processIncrement(true)); // true - —Ä—É—á–Ω–æ–π –∫–ª–∏–∫
        makeButtonInteractive(state.domElements.incrementButton);

        clickerButtonsContainer.append(state.domElements.decrementButton, state.domElements.incrementButton);
        clickerArea.append(state.domElements.mainCounterInput, clickerButtonsContainer);
        leftColumn.appendChild(clickerArea);

        // –ó–æ–Ω–∞ –ó–∞–º–µ—Ç–æ–∫ (—Å–Ω–∏–∑—É –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
        const notesArea = createDOMElement('div', { style: { display: 'flex', flexDirection: 'column', flexGrow: 1 } });
        notesArea.appendChild(createDOMElement('label', { for: CONFIG.NOTES_INPUT_ID, textContent: '–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ (Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):', style: { marginBottom: '5px', fontSize: '0.8em' } }));
        state.domElements.notesInput = createDOMElement('input', {
            type: 'text', id: CONFIG.NOTES_INPUT_ID, placeholder: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É...',
            style: {
                width: '100%', padding: '8px', boxSizing: 'border-box', marginBottom: '8px',
                background: 'rgba(0,0,0,0.2)', border: `1px solid ${CONFIG.UI_BORDER_COLOR}88`,
                borderRadius: '4px', color: CONFIG.UI_TEXT_COLOR, outline: 'none'
            }
        });
        state.domElements.notesInput.addEventListener('keypress', handleNoteInputKeypress);
        state.domElements.notesHistoryDisplay = createDOMElement('div', {
            id: CONFIG.NOTES_HISTORY_DISPLAY_ID,
            style: {
                flexGrow: 1, overflowY: 'auto', background: 'rgba(0,0,0,0.1)', padding: '8px',
                borderRadius: '4px', fontSize: '0.75em', border: `1px solid ${CONFIG.UI_BORDER_COLOR}55`
            }
        });
        notesArea.append(state.domElements.notesInput, state.domElements.notesHistoryDisplay);
        leftColumn.appendChild(notesArea);

        // --- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ì—Ä–∞—Ñ–∏–∫) ---
        const rightColumn = createDOMElement('div', {
            style: { display: 'flex', flexDirection: 'column', flexGrow: 1 }
        });
        state.domElements.statsTextSummary = createDOMElement('div', {
            id: CONFIG.STATS_TEXT_SUMMARY_ID,
            style: { fontSize: '0.85em', lineHeight: '1.6', marginBottom: '10px', textAlign: 'center' } // –¢–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
        });
        // Canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        state.domElements.shiftProgressGraphCanvas = createDOMElement('canvas', {
            id: CONFIG.SHIFT_PROGRESS_GRAPH_ID,
            style: { width: '100%', flexGrow: 1, background: 'rgba(0,0,0,0.05)', borderRadius: '4px' }
        });
        state.domElements.shiftProgressGraphCanvas.height = CONFIG.SHIFT_PROGRESS_GRAPH_HEIGHT_PX; // –í—ã—Å–æ—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

        rightColumn.append(state.domElements.statsTextSummary, state.domElements.shiftProgressGraphCanvas);

        mainWorkspace.append(leftColumn, rightColumn);
        uiContainer.appendChild(mainWorkspace);

        // --- –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–ß–∞—Å—ã) ---
        const bottomBar = createDOMElement('div', {
            style: {
                marginTop: 'auto', paddingTop: '8px', borderTop: `1px solid rgba(255,255,255,0.1)`,
                textAlign: 'right', flexShrink: 0, fontSize: '0.9em'
            }
        });
        state.domElements.realTimeClock = createDOMElement('div', {
            id: CONFIG.CLOCK_DISPLAY_ID, textContent: '00:00:00',
            style: { fontFamily: 'monospace', display: 'inline-block' }
        });
        bottomBar.appendChild(state.domElements.realTimeClock);
        uiContainer.appendChild(bottomBar);

        // –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–æ–∑–¥–∞–µ—Ç—Å—è, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ)
        buildSettingsPanel();
        mainWorkspace.appendChild(state.domElements.settingsPanel); // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å display

        buildEmergencyShowButton();
        document.body.appendChild(uiContainer);

        // –í–∞–∂–Ω–æ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É canvas –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM
        // –û–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —à–∏—Ä–∏–Ω—É –±–ª–∞–≥–æ–¥–∞—Ä—è flex-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        const canvasTimeout = setTimeout(() => { // –î–∞–µ–º DOM –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä
             if (state.domElements.shiftProgressGraphCanvas) {
                state.domElements.shiftProgressGraphCanvas.width = state.domElements.shiftProgressGraphCanvas.offsetWidth;
                logDebug(`Canvas width set to: ${state.domElements.shiftProgressGraphCanvas.width}`);
                drawShiftProgressGraph(); // –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
             }
        }, 100);
        state.intervals.canvasTimeout = canvasTimeout;


        setInitialUIStates();
        updateNotesHistoryDisplay();
        logInfo('Main UI v2 built.');
    }

    function makeButtonInteractive(button) {
        button.addEventListener('mousedown', e => {
            e.preventDefault(); button.style.transform = 'scale(0.95)';
        });
        button.addEventListener('mouseup', () => button.style.transform = 'scale(1)');
        button.addEventListener('mouseleave', () => button.style.transform = 'scale(1)');
    }

    function buildEmergencyShowButton() {
        // (–ö–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç–∏–ª—è–º–∏ –∏–∑ CONFIG)
         state.domElements.emergencyShowButton = createDOMElement('button', {
            id: 'emergencyShowBtn_v2', textContent: CONFIG.EMERGENCY_SHOW_BUTTON_TEXT, title: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            style: {
                position: 'fixed', bottom: CONFIG.UI_BOTTOM_OFFSET, right: CONFIG.UI_RIGHT_OFFSET,
                width: CONFIG.EMERGENCY_SHOW_BUTTON_SIZE, height: CONFIG.EMERGENCY_SHOW_BUTTON_SIZE,
                backgroundColor: 'rgba(50,60,80,0.6)', border: `1px solid ${CONFIG.UI_BORDER_COLOR}`,
                color: CONFIG.UI_TEXT_COLOR, borderRadius: '50%', cursor: 'pointer', display: 'none',
                alignItems: 'center', justifyContent: 'center', zIndex: '999999999',
                opacity: String(CONFIG.EMERGENCY_SHOW_BUTTON_OPACITY),
                transition: 'opacity 0.2s ease, transform 0.2s ease, background-color 0.2s', fontSize: '16px',
                boxShadow: '0 0 15px rgba(0,0,0,0.3)'
            }
        });
        state.domElements.emergencyShowButton.onmouseover = () => {
            state.domElements.emergencyShowButton.style.opacity = '1';
            state.domElements.emergencyShowButton.style.transform = 'scale(1.1)';
            state.domElements.emergencyShowButton.style.backgroundColor = CONFIG.UI_BORDER_COLOR;
        };
        state.domElements.emergencyShowButton.onmouseout = () => {
            state.domElements.emergencyShowButton.style.opacity = String(CONFIG.EMERGENCY_SHOW_BUTTON_OPACITY);
            state.domElements.emergencyShowButton.style.transform = 'scale(1)';
            state.domElements.emergencyShowButton.style.backgroundColor = 'rgba(50,60,80,0.6)';
        };
        state.domElements.emergencyShowButton.onclick = () => setUIVisibility(true);
        document.body.appendChild(state.domElements.emergencyShowButton);
    }

        function buildSettingsPanel() {
        const panel = createDOMElement('div', {
            id: CONFIG.SETTINGS_PANEL_ID,
            style: {
                position: 'absolute', top: '-2px', right: '-2px', bottom: '-2px',
                width: '300px',
                backgroundColor: CONFIG.UI_BACKGROUND_COLOR,
                borderLeft: `2px solid ${CONFIG.UI_BORDER_COLOR}`,
                padding: '15px', zIndex: '100', display: 'none', flexDirection: 'column',
                gap: '15px', overflowY: 'auto', boxShadow: '-8px 0px 20px rgba(0,0,0,0.3)',
                transition: 'transform 0.35s cubic-bezier(0.25, 0.1, 0.25, 1)'
            }
        });
        state.domElements.settingsPanel = panel;

        const heading = createDOMElement('h3', { textContent: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã', style: { margin: '0 0 10px 0', textAlign: 'center', color: CONFIG.MAIN_ACCENT_COLOR, fontSize: '1.2em'} });
        panel.appendChild(heading);

        const commonSelectStyle = {width: '100%', padding: '8px', boxSizing: 'border-box', backgroundColor: 'rgba(0,0,0,0.25)', color: CONFIG.UI_TEXT_COLOR, border: `1px solid ${CONFIG.UI_BORDER_COLOR}aa`, borderRadius: '4px'};
        const commonLabelStyle = { display: 'block', marginBottom: '5px', fontSize: '0.9em'};

        // –¢–∏–ø —Å–º–µ–Ω—ã
        const shiftTypeGroup = createDOMElement('div');
        shiftTypeGroup.appendChild(createDOMElement('label', { for: CONFIG.SETTINGS_SHIFT_TYPE_SELECT_ID, textContent: '–¢–∏–ø —Å–º–µ–Ω—ã:', style: commonLabelStyle }));
        state.domElements.settingsShiftTypeSelect = createDOMElement('select', { id: CONFIG.SETTINGS_SHIFT_TYPE_SELECT_ID, style: commonSelectStyle });
        state.domElements.settingsShiftTypeSelect.addEventListener('change', handleShiftSettingsChange);
        shiftTypeGroup.appendChild(state.domElements.settingsShiftTypeSelect);
        panel.appendChild(shiftTypeGroup);

        // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (—Ä—É—á–Ω–æ–µ)
        const shiftStartTimeGroup = createDOMElement('div');
        shiftStartTimeGroup.appendChild(createDOMElement('label', { for: CONFIG.SETTINGS_SHIFT_START_TIME_INPUT_ID, textContent: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ —Ä—É—á–Ω–æ–µ):', style: commonLabelStyle }));
        state.domElements.settingsShiftStartTimeInput = createDOMElement('input', { type: 'time', id: CONFIG.SETTINGS_SHIFT_START_TIME_INPUT_ID, style: commonSelectStyle });
        state.domElements.settingsShiftStartTimeInput.addEventListener('change', handleShiftSettingsChange);
        shiftStartTimeGroup.appendChild(state.domElements.settingsShiftStartTimeInput);
        panel.appendChild(shiftStartTimeGroup);

        // –û–±–µ–¥
        const lunchGroup = createDOMElement('div');
        lunchGroup.appendChild(createDOMElement('label', { for: CONFIG.SETTINGS_LUNCH_TIME_SELECT_ID, textContent: '–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤:', style: commonLabelStyle }));
        state.domElements.settingsLunchSelect = createDOMElement('select', { id: CONFIG.SETTINGS_LUNCH_TIME_SELECT_ID, style: commonSelectStyle });
        state.domElements.settingsLunchSelect.addEventListener('change', handleLunchSettingChange);
        lunchGroup.appendChild(state.domElements.settingsLunchSelect);
        panel.appendChild(lunchGroup);

        // –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ-–∫–ª–∏–∫–∞
        const autoClickGroup = createDOMElement('div', {style: {marginTop: '10px'}});
        const autoClickLabel = createDOMElement('label', { style: { display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: '0.9em' } });
        state.domElements.autoClickEnabledCheckbox = createDOMElement('input', { type: 'checkbox', id: CONFIG.AUTO_CLICK_ENABLED_CHECKBOX_ID, checked: state.autoClickEnabled, style: { marginRight: '10px', transform: 'scale(1.3)' } });
        state.domElements.autoClickEnabledCheckbox.addEventListener('change', handleAutoClickSettingChange);
        autoClickLabel.append(state.domElements.autoClickEnabledCheckbox, `–ê–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø–æ —Å–ª–æ–≤—É "${CONFIG.AUTO_CLICK_TRIGGER_WORD}")`);
        autoClickGroup.appendChild(autoClickLabel);
        panel.appendChild(autoClickGroup);

        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
        const settingsPanelButtonStyle = {
            cursor: 'pointer',
            backgroundColor: `${CONFIG.MAIN_ACCENT_COLOR}cc`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            border: `1px solid ${CONFIG.UI_BORDER_COLOR}aa`,
            color: 'white', // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            borderRadius: '6px',
            padding: '10px',
            fontSize: '1em',
            width: '100%',
            marginTop: 'auto', // –ü—Ä–∏–∂–∞—Ç—å –∫ –Ω–∏–∑—É, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
            transition: 'background-color 0.2s, border-color 0.2s'
        };
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        const closeButton = createDOMElement('button', {
            textContent: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ó–∞–∫—Ä—ã—Ç—å',
            style: settingsPanelButtonStyle // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        });
        closeButton.addEventListener('click', () => setSettingsPanelVisibility(false));
        panel.appendChild(closeButton);
    }

    function setInitialUIStates() {
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–ª–µ–∫—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const shiftSelect = state.domElements.settingsShiftTypeSelect;
        if(shiftSelect) {
            shiftSelect.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –±—ã–ª–∏ —Å—Ç–∞—Ä—ã–µ –æ–ø—Ü–∏–∏
            [['auto', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'], ['day', `–î–Ω–µ–≤–Ω–∞—è (—Å ${CONFIG.DEFAULT_DAY_SHIFT_START_TIME})`], ['night', `–ù–æ—á–Ω–∞—è (—Å ${CONFIG.DEFAULT_NIGHT_SHIFT_START_TIME})`]].forEach(([val, txt]) => {
                shiftSelect.add(new Option(txt, val));
            });
            shiftSelect.value = state.shiftType;
        }
        if(state.domElements.settingsShiftStartTimeInput && state.shiftStartTime) {
            state.domElements.settingsShiftStartTimeInput.value = formatDateToHHMM(state.shiftStartTime);
        }

        const lunchSelect = state.domElements.settingsLunchSelect;
        if(lunchSelect) {
            lunchSelect.innerHTML = '';
            CONFIG.DEFAULT_LUNCH_OPTIONS.forEach((opt, index) => {
                lunchSelect.add(new Option(opt.text, String(index)));
            });
            const currentLunchIndex = CONFIG.DEFAULT_LUNCH_OPTIONS.findIndex(opt => opt.start === state.selectedLunchOption.start && opt.end === state.selectedLunchOption.end);
            lunchSelect.value = String(currentLunchIndex > -1 ? currentLunchIndex : CONFIG.DEFAULT_LUNCH_INDEX);
        }
        if(state.domElements.autoClickEnabledCheckbox) state.domElements.autoClickEnabledCheckbox.checked = state.autoClickEnabled;


        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        setUIVisibility(state.uiVisible);
        setUILockState(state.uiLocked);
        setSettingsPanelVisibility(state.settingsPanelVisible);
        updateCounterDisplay();
        updateManualShiftTimeInputVisibility();
    }


    // --- ------------------------------------------------------------------- ---
    // --- ----------------------- –£–ü–†–ê–í–õ–ï–ù–ò–ï UI –°–û–°–¢–û–Ø–ù–ò–ï–ú ------------------ ---
    // --- ------------------------------------------------------------------- ---
    function setUIVisibility(visible) {
        // (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫)
        state.uiVisible = visible;
        if (state.domElements.uiContainer) {
            state.domElements.uiContainer.style.opacity = visible ? '1' : '0';
            state.domElements.uiContainer.style.transform = visible ? 'translateY(0)' : 'translateY(30px)';
            state.domElements.uiContainer.style.pointerEvents = visible ? 'auto' : 'none';
        }
        if (state.domElements.emergencyShowButton) {
            state.domElements.emergencyShowButton.style.display = visible ? 'none' : 'flex';
        }
        if (!visible && state.settingsPanelVisible) {
            setSettingsPanelVisibility(false);
        }
        saveDataToStorage();
    }

    function toggleUILockState() { setUILockState(!state.uiLocked); }

    function setUILockState(locked) {
        // (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏)
        if (!state.uiVisible && locked) return;
        state.uiLocked = locked;

        state.domElements.lockUIButton.textContent = state.uiLocked ? CONFIG.LOCK_UI_BUTTON_TEXT_LOCKED : CONFIG.LOCK_UI_BUTTON_TEXT_UNLOCKED;
        state.domElements.lockUIButton.title = state.uiLocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–∫—Ä–æ–º–µ –∫–ª–∏–∫–µ—Ä–∞ –∏ PageDown)';
        state.domElements.lockUIButton.style.backgroundColor = state.uiLocked ? 'rgba(200, 80, 80, 0.5)' : 'rgba(255,255,255,0.05)';

        const elementsToToggle = [
            state.domElements.toggleSettingsButton, state.domElements.emergencyHideButton,
            state.domElements.decrementButton, // –ö–Ω–æ–ø–∫–∞ -1 —Ç–æ–∂–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
            state.domElements.mainCounterInput, // –ü–æ–ª–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
            state.domElements.notesInput,       // –ü–æ–ª–µ –∑–∞–º–µ—Ç–æ–∫
            // –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∏–¥–∏–º–∞
            ...(state.settingsPanelVisible ? state.domElements.settingsPanel.querySelectorAll('input, select, button:not(#'+state.domElements.lockUIButton.id+')') : [])
        ];

        elementsToToggle.forEach(el => {
            if (el) {
                 el.disabled = state.uiLocked;
                 el.style.opacity = state.uiLocked ? '0.6' : '1';
                 el.style.cursor = state.uiLocked ? 'not-allowed' : (el.tagName === 'BUTTON' || el.tagName === 'SELECT' ? 'pointer' : 'default');
            }
        });
        // –ö–Ω–æ–ø–∫–∞ +1 –∏ PageDown –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        saveDataToStorage();
    }

    function toggleSettingsPanelVisibility() { setSettingsPanelVisibility(!state.settingsPanelVisible); }

    function setSettingsPanelVisibility(visible) {
        // (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏)
        state.settingsPanelVisible = visible;
        if (state.domElements.settingsPanel) {
            state.domElements.settingsPanel.style.display = visible ? 'flex' : 'none';
            state.domElements.settingsPanel.style.transform = visible ? 'translateX(0%)' : 'translateX(105%)';
        }
         state.domElements.toggleSettingsButton.textContent = visible ? CONFIG.TOGGLE_SETTINGS_BUTTON_TEXT_OPENED : CONFIG.TOGGLE_SETTINGS_BUTTON_TEXT_CLOSED;
        state.domElements.toggleSettingsButton.style.backgroundColor = visible ? 'rgba(100,120,160,0.6)' : 'rgba(255,255,255,0.05)';

        if (visible && state.uiLocked) { setUILockState(true); } // –ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        saveDataToStorage();
    }

    // --- ------------------------------------------------------------------- ---
    // --- ----------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô --------------------- ---
    // --- ------------------------------------------------------------------- ---
    function processIncrement(isManualAction = false) {
        if (isManualAction && state.uiLocked && event && (event.target === state.domElements.incrementButton)) {
             // –ï—Å–ª–∏ UI –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∫–ª–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ –±–æ–ª—å—à–æ–π –∫–Ω–æ–ø–∫–µ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
        } else if (state.uiLocked && isManualAction) { // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Ä—É—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –±–ª–æ–∫–µ (–∫—Ä–æ–º–µ PageDown)
            logDebug('UI is locked, manual increment ignored unless from main button.');
            return;
        } // –ê–≤—Ç–æ-–∫–ª–∏–∫ –∏ PageDown –ø—Ä–æ—Ö–æ–¥—è—Ç –º–∏–º–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI

        state.totalClicks++;
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        state.clickDataForGraph.push({ timestamp: new Date(), count: state.totalClicks });
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã)
        // filterOldGraphData(); // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ clickDataForGraph

        updateCounterDisplay();
        updateStatisticsAndGraph(); // –û–±–Ω–æ–≤–∏—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫
        saveDataToStorage();
    }
    function filterOldGraphData(){
        // –ü—Ä–∏–º–µ—Ä: –æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É (–µ—Å–ª–∏ state.shiftStartTime –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
        if (!state.shiftStartTime) return;
        const shiftStartMillis = state.shiftStartTime.getTime();
        state.clickDataForGraph = state.clickDataForGraph.filter(d => d.timestamp.getTime() >= shiftStartMillis);
    }


    function handleDecrementClick() {
        if (state.uiLocked) return;
        if (state.totalClicks > 0) {
            state.totalClicks--;
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞—Ñ–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ, –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–º–µ–Ω—å—à–∞—Ç—å –µ–µ count,
            // –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é.
            if (state.clickDataForGraph.length > 0 && state.clickDataForGraph[state.clickDataForGraph.length-1].count > state.totalClicks) {
                 // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π count –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –±—ã–ª –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ (–ø–æ—Å–ª–µ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞), —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å
                 // —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è —Å—á–µ—Ç—á–∏–∫–∞. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
                 // —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, —á—Ç–æ–±—ã –≥—Ä–∞—Ñ–∏–∫ –Ω–µ "–ø—Ä—ã–≥–Ω—É–ª" –Ω–∞–∑–∞–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
                 state.clickDataForGraph.push({ timestamp: new Date(), count: state.totalClicks });
            } else if(state.clickDataForGraph.length > 0){
                state.clickDataForGraph.pop(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            }

            updateCounterDisplay();
            updateStatisticsAndGraph(); // –û–±–Ω–æ–≤–∏—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫
            saveDataToStorage();
        }
    }

    function handleCounterInputChange(event) {
        if (state.uiLocked) { // –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            event.target.value = state.totalClicks;
            return;
        }
        let newValue = parseInt(event.target.value, 10);
        if (isNaN(newValue) || newValue < 0) {
            newValue = 0; // –∏–ª–∏ state.totalClicks, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –æ–±–Ω—É–ª—è—Ç—å –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ
        }
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        if (newValue !== state.totalClicks) {
            state.clickDataForGraph.push({ timestamp: new Date(), count: newValue });
        }
        state.totalClicks = newValue;

        updateCounterDisplay(); // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ auto-correction —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª
        updateStatisticsAndGraph();
        saveDataToStorage();
    }

    function updateCounterDisplay() {
        if (state.domElements.mainCounterInput) {
            state.domElements.mainCounterInput.value = state.totalClicks;
        }
    }

    function handleShiftSettingsChange() {
        // (–õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ ID –∏ –≤—ã–∑–æ–≤–æ–º determineAndSetShiftStartTime —Å —Ñ–ª–∞–≥–æ–º)
        state.shiftType = state.domElements.settingsShiftTypeSelect.value;
        determineAndSetShiftStartTime(false); // false - –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∞–≤—Ç–æ, —É—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateManualShiftTimeInputVisibility();
        updateStatisticsAndGraph();
        saveDataToStorage();
    }

    function updateManualShiftTimeInputVisibility() {
        // (–ö–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ ID)
        const isManual = state.shiftType !== 'auto';
        const inputEl = state.domElements.settingsShiftStartTimeInput;
        const labelEl = inputEl?.labels?.[0] || inputEl?.previousElementSibling;

        if (inputEl) {
           inputEl.disabled = !isManual;
           inputEl.style.opacity = isManual ? '1' : '0.6';
           inputEl.style.display = isManual ? 'block' : 'none';
           if (state.shiftStartTime) { // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                inputEl.value = formatDateToHHMM(state.shiftStartTime);
           }
        }
        if (labelEl && labelEl.tagName === 'LABEL') {
           labelEl.style.display = isManual ? 'block' : 'none';
        }
    }

    function handleLunchSettingChange() {
        // (–ö–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ ID)
        const selectedIndex = parseInt(state.domElements.settingsLunchSelect.value, 10);
        if (CONFIG.DEFAULT_LUNCH_OPTIONS[selectedIndex]) {
            state.selectedLunchOption = CONFIG.DEFAULT_LUNCH_OPTIONS[selectedIndex];
            updateStatisticsAndGraph();
            saveDataToStorage();
        }
    }
    function handleAutoClickSettingChange(event) {
        state.autoClickEnabled = event.target.checked;
        logInfo(`Auto-click is now ${state.autoClickEnabled ? 'ENABLED' : 'DISABLED'}`);
        saveDataToStorage();
        if (state.autoClickEnabled && !state.mutationObserver) {
            initializeMutationObserver();
        } else if (!state.autoClickEnabled && state.mutationObserver) {
            state.mutationObserver.disconnect();
            state.mutationObserver = null;
        }
    }

    function handleNoteInputKeypress(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            const noteText = state.domElements.notesInput.value.trim();
            if (noteText) {
                state.notesHistory.unshift({ text: noteText, timestamp: new Date() }); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                if (state.notesHistory.length > CONFIG.MAX_NOTES_HISTORY_ITEMS) {
                    state.notesHistory.pop(); // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                }
                state.domElements.notesInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                updateNotesHistoryDisplay();
                saveDataToStorage();
            }
        }
    }

    function updateNotesHistoryDisplay() {
        const display = state.domElements.notesHistoryDisplay;
        if (!display) return;
        display.innerHTML = ''; // –û—á–∏—â–∞–µ–º
        if (state.notesHistory.length === 0) {
            display.appendChild(createDOMElement('p', {textContent: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç–∞.', style: {opacity: '0.5', textAlign: 'center', margin: '10px 0'}}));
            return;
        }
        state.notesHistory.forEach(note => {
            const noteItem = createDOMElement('div', {
                style: {
                    padding: '5px', borderBottom: '1px dashed rgba(255,255,255,0.1)',
                    marginBottom: '5px', wordBreak: 'break-word'
                }
            });
            const timeSpan = createDOMElement('span', {textContent: `[${formatDateToHHMM(note.timestamp, true)}] `, style: {color: CONFIG.MAIN_ACCENT_COLOR, marginRight: '5px'}});
            const textNode = document.createTextNode(note.text);
            noteItem.append(timeSpan, textNode);
            display.appendChild(noteItem);
        });
    }

    function handlePageKeydown(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–æ–∫—É—Å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å ÿ™ÿß€åŸæ ⁄©ÿ±ÿØŸÜ
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.isContentEditable) {
            return;
        }
        if (event.key === CONFIG.INCREMENT_KEYBOARD_SHORTCUT) {
            event.preventDefault();
            processIncrement(false); // false - –Ω–µ —Ä—É—á–Ω–æ–π –∫–ª–∏–∫ (–≤ –ø–ª–∞–Ω–µ GUI), –Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            logDebug_v2(`${CONFIG.INCREMENT_KEYBOARD_SHORTCUT} pressed, counter incremented.`);

            // –≠—Ñ—Ñ–µ–∫—Ç "–Ω–∞–∂–∞—Ç–∏—è" –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if(state.domElements.incrementButton){
                state.domElements.incrementButton.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    if(state.domElements.incrementButton) state.domElements.incrementButton.style.transform = 'scale(1)';
                }, 100);
            }
        }
    }

    // --- ------------------------------------------------------------------- ---
    // --- --------------------------- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ----------------------- ---
    // --- ------------------------------------------------------------------- ---

    function determineAndSetShiftStartTime(forceAuto = false) {
        const now = new Date();
        let shiftStartHour, shiftStartMinute;
        let calculatedStartTime = new Date(now); // –ù–∞—á–Ω–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã

        if (forceAuto || state.shiftType === 'auto') { // –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const [dayH, dayM] = CONFIG.DEFAULT_DAY_SHIFT_START_TIME.split(':').map(Number);
            const [nightH, nightM] = CONFIG.DEFAULT_NIGHT_SHIFT_START_TIME.split(':').map(Number);
            const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
            const dayShiftStartInMinutes = dayH * 60 + dayM;
            const nightShiftStartInMinutes = nightH * 60 + nightM;

            if (currentTimeInMinutes >= dayShiftStartInMinutes && currentTimeInMinutes < nightShiftStartInMinutes) {
                [shiftStartHour, shiftStartMinute] = [dayH, dayM]; // –î–Ω–µ–≤–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è
            } else {
                [shiftStartHour, shiftStartMinute] = [nightH, nightM]; // –ù–æ—á–Ω–∞—è
                if (currentTimeInMinutes < dayShiftStartInMinutes) { // –ù–æ—á–Ω–∞—è —Å–æ –≤—á–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—á–∞—Å 3:00, –¥–Ω–µ–≤–Ω–∞—è —Å 7:15)
                    calculatedStartTime.setDate(now.getDate() - 1);
                }
            }
            calculatedStartTime.setHours(shiftStartHour, shiftStartMinute, 0, 0);
            state.shiftStartTime = calculatedStartTime;
            logDebug(`Auto-determined shift start: ${state.shiftStartTime.toLocaleString()}`);

        } else if (state.shiftType === 'day' || state.shiftType === 'night') { // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞, –Ω–æ –≤—Ä–µ–º—è –∏–∑ –ø–æ–ª—è
            const timeValue = state.domElements.settingsShiftStartTimeInput?.value;
            if (timeValue) {
                [shiftStartHour, shiftStartMinute] = timeValue.split(':').map(Number);
                calculatedStartTime.setHours(shiftStartHour, shiftStartMinute, 0, 0);
                 // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ "–≤—á–µ—Ä–∞" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                if (state.shiftType === 'night' && now.getHours() < shiftStartHour) {
                    calculatedStartTime.setDate(now.getDate() - 1);
                }
                state.shiftStartTime = calculatedStartTime;
            } else { // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                 const defaultTime = state.shiftType === 'day' ? CONFIG.DEFAULT_DAY_SHIFT_START_TIME : CONFIG.DEFAULT_NIGHT_SHIFT_START_TIME;
                [shiftStartHour, shiftStartMinute] = defaultTime.split(':').map(Number);
                calculatedStartTime.setHours(shiftStartHour, shiftStartMinute, 0, 0);
                if (state.shiftType === 'night' && now.getHours() < shiftStartHour) {
                     calculatedStartTime.setDate(now.getDate() - 1);
                }
                state.shiftStartTime = calculatedStartTime;
            }
            logDebug(`Manual shift type set. Start: ${state.shiftStartTime.toLocaleString()}`);
        }
        filterOldGraphData(); // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
    }

    function updateRealTimeClockDisplay() {
        if (state.domElements.realTimeClock) {
            state.domElements.realTimeClock.textContent = formatDateToHHMM(new Date(), true);
        }
    }

    function updateStatisticsAndGraph() { // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        if (!state.shiftStartTime || !(state.shiftStartTime instanceof Date) || isNaN(state.shiftStartTime.getTime())) {
            determineAndSetShiftStartTime(true); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –µ—Å—Ç—å
             if (!state.shiftStartTime) {
                if (state.domElements.statsTextSummary) state.domElements.statsTextSummary.innerHTML = '<p style="color:red;">–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã!</p>';
                return;
             }
        }

        const now = new Date();
        let totalElapsedMs = now.getTime() - state.shiftStartTime.getTime();

        if (totalElapsedMs < 0) { // –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º
            if (state.domElements.statsTextSummary) {
                state.domElements.statsTextSummary.innerHTML = `
                    <p>–°–º–µ–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≤: ${formatDateToHHMM(state.shiftStartTime)}</p>
                    <p>–û–∂–∏–¥–∞–Ω–∏–µ...</p>
                `;
            }
            drawShiftProgressGraph(); // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
            return;
        }

        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–µ–¥–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ shiftStartTime –º–æ–∂–µ—Ç –±—ã—Ç—å "–≤—á–µ—Ä–∞")
        let lunchDurationMs = 0;
        const lunchTimes = state.selectedLunchOption;
        if (lunchTimes.start !== "00:00" || lunchTimes.end !== "00:00") {
            const shiftStartDate = new Date(state.shiftStartTime.getFullYear(), state.shiftStartTime.getMonth(), state.shiftStartTime.getDate());

            let lunchStartAbs = new Date(shiftStartDate);
            const [lsh, lsm] = lunchTimes.start.split(':').map(Number);
            lunchStartAbs.setHours(lsh, lsm, 0, 0);

            let lunchEndAbs = new Date(shiftStartDate);
            const [leh, lem] = lunchTimes.end.split(':').map(Number);
            lunchEndAbs.setHours(leh, lem, 0, 0);

             // –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤—á–µ—Ä–∞, –∞ –æ–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ–Ω–∞ 19:00 –≤—á–µ—Ä–∞, –æ–±–µ–¥ 01:00 —Å–µ–≥–æ–¥–Ω—è)
            if (state.shiftStartTime.getDate() !== now.getDate() && lunchStartAbs.getTime() < state.shiftStartTime.getTime()) {
                lunchStartAbs.setDate(lunchStartAbs.getDate() + 1);
                lunchEndAbs.setDate(lunchEndAbs.getDate() + 1);
            }

            // –ï—Å–ª–∏ –æ–±–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å —Å–∞–º –ø–æ —Å–µ–±–µ
            if (lunchEndAbs < lunchStartAbs) lunchEndAbs.setDate(lunchEndAbs.getDate() + 1);

            const effectiveLunchStart = Math.max(state.shiftStartTime.getTime(), lunchStartAbs.getTime());
            const effectiveLunchEnd = Math.min(now.getTime(), lunchEndAbs.getTime());

            if (effectiveLunchEnd > effectiveLunchStart) {
                lunchDurationMs = effectiveLunchEnd - effectiveLunchStart;
            }
        }

        const effectiveWorkMs = Math.max(0, totalElapsedMs - lunchDurationMs);
        const hoursWorked = effectiveWorkMs / (1000 * 60 * 60);
        const clicksPerHour = (hoursWorked > 0.001) ? (state.totalClicks / hoursWorked) : 0;

        if (state.domElements.statsTextSummary) {
            state.domElements.statsTextSummary.innerHTML = `
                <p>–°–º–µ–Ω–∞ —Å: <strong>${formatDateToHHMM(state.shiftStartTime)}</strong> (${state.shiftType === 'auto' ? '–ê–≤—Ç–æ' : (state.shiftType === 'day' ? '–î–µ–Ω—å' : '–ù–æ—á—å')})</p>
                <p>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <strong>${state.totalClicks}</strong> (–∑–∞ ${formatMsToDuration(effectiveWorkMs)})</p>
                <p>–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: <strong style="color: ${CONFIG.MAIN_ACCENT_COLOR}; font-size: 1.1em;">${clicksPerHour.toFixed(1)}</strong> –≤ —á–∞—Å</p>
                <p>–û–±–µ–¥: ${lunchTimes.text}</p>
            `;
        }
        drawShiftProgressGraph(); // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    }


    function drawShiftProgressGraph() {
        if (!state.domElements.shiftProgressGraphCanvas || !state.shiftStartTime) return;
        const canvas = state.domElements.shiftProgressGraphCanvas;
        const ctx = canvas.getContext('2d');
        const w = canvas.width;
        const h = canvas.height;
        ctx.clearRect(0, 0, w, h);

        const now = new Date();
        const shiftStartMillis = state.shiftStartTime.getTime();
        let totalShiftDurationMs = now.getTime() - shiftStartMillis;

        if (totalShiftDurationMs <=0) return; // –°–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        const padding = { top: 10, right: 35, bottom: 25, left: 35 }; // –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –æ—Å–µ–π
        const graphWidth = w - padding.left - padding.right;
        const graphHeight = h - padding.top - padding.bottom;

        // --- –û—Å—å X (–í—Ä–µ–º—è) ---
        // –ù–∞—á–∞–ª–æ –≤ 0 (—Å—Ç–∞—Ä—Ç —Å–º–µ–Ω—ã), –∫–æ–Ω–µ—Ü - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–º–µ–Ω–µ.
        // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∞–∫—Å. –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 12 —á–∞—Å–æ–≤)
        // const maxExpectedShiftMs = 8 * 60 * 60 * 1000; // –ù–∞–ø—Ä–∏–º–µ—Ä, 8 —á–∞—Å–æ–≤
        // totalShiftDurationMs = Math.min(totalShiftDurationMs, maxExpectedShiftMs);

        // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É –∏ –º–µ—Ç–∫–∏ –æ—Å–∏ X
        ctx.strokeStyle = 'rgba(255,255,255,0.1)';
        ctx.fillStyle = CONFIG.UI_TEXT_COLOR;
        ctx.font = '10px ' + CONFIG.FONT_FAMILY;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';

        const numTimeMarkers = CONFIG.GRAPH_X_AXIS_TIME_MARKERS_COUNT;
        for (let i = 0; i <= numTimeMarkers; i++) {
            const ratio = i / numTimeMarkers;
            const x = padding.left + ratio * graphWidth;
            ctx.beginPath();
            ctx.moveTo(x, padding.top);
            ctx.lineTo(x, padding.top + graphHeight);
            ctx.stroke();
            const timeMs = ratio * totalShiftDurationMs;
            const timeLabel = formatMsToDuration(timeMs).replace('00—á ',''); // –£–±–∏—Ä–∞–µ–º "00—á" –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞
            ctx.fillText(timeLabel, x, padding.top + graphHeight + 5);
        }
         ctx.fillText('–°–µ–π—á–∞—Å', padding.left + graphWidth, padding.top + graphHeight + 15); // –ü–æ–¥–ø–∏—Å—å "–°–µ–π—á–∞—Å"


        // --- –û—Å—å Y (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ) ---
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y - –ª–∏–±–æ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ª–∏–±–æ –º–∞–∫—Å. –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ª–∏–Ω–∏–π
        let maxYValue = Math.max(1, state.totalClicks); // –ú–∏–Ω–∏–º—É–º 1, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        CONFIG.GRAPH_TARGET_RATE_LINES.forEach(line => {
            const targetAtEnd = line.rate * (totalShiftDurationMs / (3600 * 1000));
            maxYValue = Math.max(maxYValue, targetAtEnd);
        });
        maxYValue = Math.ceil(maxYValue * 1.1); // +10% –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É

        ctx.textAlign = 'right';
        ctx.textBaseline = 'middle';
        const numYMarkers = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏ Y
        for (let i = 0; i <= numYMarkers; i++) {
            const ratio = i / numYMarkers;
            const y = padding.top + graphHeight - (ratio * graphHeight);
            const value = Math.round(ratio * maxYValue);
            ctx.beginPath();
            ctx.moveTo(padding.left -5, y);
            ctx.lineTo(padding.left + graphWidth, y); // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
            ctx.stroke();
            if (value > 0 || i === 0 ) ctx.fillText(String(value), padding.left - 8, y);
        }

        // --- –†–∏—Å—É–µ–º —Ü–µ–ª–µ–≤—ã–µ –ª–∏–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
        CONFIG.GRAPH_TARGET_RATE_LINES.forEach(targetLine => {
            ctx.strokeStyle = targetLine.color;
            ctx.lineWidth = 1;
            ctx.setLineDash([3, 3]); // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
            ctx.beginPath();
            ctx.moveTo(padding.left, padding.top + graphHeight); // –ù–∞—á–∞–ª–æ –≤ (0,0) –≥—Ä–∞—Ñ–∏–∫–∞

            const itemsAtEndOfCurrentView = targetLine.rate * (totalShiftDurationMs / (3600 * 1000));
            const yTarget = padding.top + graphHeight - (itemsAtEndOfCurrentView / maxYValue) * graphHeight;
            ctx.lineTo(padding.left + graphWidth, Math.max(padding.top, yTarget)); // –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
            ctx.stroke();
            // –ü–æ–¥–ø–∏—Å—å –ª–∏–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å)
            // ctx.fillStyle = targetLine.color;
            // ctx.fillText(targetLine.label, padding.left + graphWidth - 30, Math.max(padding.top + 10, yTarget - 5 ));
        });
        ctx.setLineDash([]); // –°–±—Ä–æ—Å –ø—É–Ω–∫—Ç–∏—Ä–∞

        // --- –†–∏—Å—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
        if (state.clickDataForGraph.length > 0) {
            ctx.strokeStyle = CONFIG.GRAPH_LINE_COLOR;
            ctx.lineWidth = 2;
            ctx.beginPath();

            state.clickDataForGraph.forEach((dataPoint, index) => {
                const elapsedMsForPoint = dataPoint.timestamp.getTime() - shiftStartMillis;
                if (elapsedMsForPoint < 0) return; // –¢–æ—á–∫–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã

                const xRatio = elapsedMsForPoint / totalShiftDurationMs;
                const x = padding.left + xRatio * graphWidth;

                const yRatio = dataPoint.count / maxYValue;
                const y = padding.top + graphHeight - (yRatio * graphHeight);

                if (x > padding.left + graphWidth + 5) return; // –ù–µ —Ä–∏—Å—É–µ–º —Ç–æ—á–∫–∏ —Å–∏–ª—å–Ω–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ "–°–µ–π—á–∞—Å"

                if (index === 0 || state.clickDataForGraph.slice(0,index).every(p => p.timestamp.getTime() < shiftStartMillis)) {
                     // –î–ª—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ, –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±—ã–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
                     ctx.moveTo(Math.max(padding.left, x), Math.min(padding.top + graphHeight, Math.max(padding.top, y)));
                } else {
                     ctx.lineTo(Math.max(padding.left, x), Math.min(padding.top + graphHeight, Math.max(padding.top, y)));
                }
            });
            ctx.stroke();
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ –ª–∏–Ω–∏—é
            // state.clickDataForGraph.forEach(...) { ctx.beginPath(); ctx.arc(x,y,2,0,2*Math.PI); ctx.fill(); }
        }
    }


    function initializeMutationObserver() {
        // (–õ–æ–≥–∏–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–æ–≤–∞ "–ø–æ—è–≤–ª–µ–Ω–∏—è" –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞)
        if (state.mutationObserver) state.mutationObserver.disconnect();

        const observeTargetNode = document.querySelector(CONFIG.TRIGGER_OBSERVE_AREA_SELECTOR) || document.body;

        const observerCallback = (mutationsList) => {
            if (!state.autoClickEnabled) return;

            let mogoSkuryCurrentlyOnPage = false;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π
            if (observeTargetNode.textContent?.includes(CONFIG.AUTO_CLICK_TRIGGER_WORD)) {
                mogoSkuryCurrentlyOnPage = true;
            }

            if (mogoSkuryCurrentlyOnPage && !state.isMOgoskuryCurrentlyVisible) {
                // –°–ª–æ–≤–æ –ø–æ—è–≤–∏–ª–æ—Å—å (–∏–ª–∏ –±—ã–ª–æ, –Ω–æ –º—ã –µ–≥–æ –Ω–µ "–≤–∏–¥–µ–ª–∏")
                logDebug(`Trigger "${CONFIG.AUTO_CLICK_TRIGGER_WORD}" detected. Was not visible, now is.`);
                state.isMOgoskuryCurrentlyVisible = true;
                state.clickedForThisMOgoskuryInstance = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç.–∫. —ç—Ç–æ –Ω–æ–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
            } else if (!mogoSkuryCurrentlyOnPage && state.isMOgoskuryCurrentlyVisible) {
                // –°–ª–æ–≤–æ –∏—Å—á–µ–∑–ª–æ
                logDebug(`Trigger "${CONFIG.AUTO_CLICK_TRIGGER_WORD}" disappeared.`);
                state.isMOgoskuryCurrentlyVisible = false;
                state.clickedForThisMOgoskuryInstance = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—è–≤–ª–µ–Ω–∏—é
            }

            // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤–∏–¥–∏–º–æ –∏ –º—ã –µ—â–µ –Ω–µ –∫–ª–∏–∫–Ω—É–ª–∏ –∑–∞ —ç—Ç–æ "–ø–æ—è–≤–ª–µ–Ω–∏–µ"
            if (state.isMOgoskuryCurrentlyVisible && !state.clickedForThisMOgoskuryInstance) {
                logInfo(`Auto-incrementing for "${CONFIG.AUTO_CLICK_TRIGGER_WORD}"`);
                processIncrement(false); // false - –Ω–µ —Ä—É—á–Ω–æ–π –∫–ª–∏–∫
                state.clickedForThisMOgoskuryInstance = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏
            }
        };

        state.mutationObserver = new MutationObserver(observerCallback);
        const observerConfig = { childList: true, subtree: true, characterData: true };
        state.mutationObserver.observe(observeTargetNode, observerConfig);
        logInfo(`MutationObserver for auto-click initialized. Observing:`, observeTargetNode);

        // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        observerCallback([]); // –í—ã–∑—ã–≤–∞–µ–º —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –º—É—Ç–∞—Ü–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    }

    // --- ------------------------------------------------------------------- ---
    // --- ----------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê ------------------- ---
    // --- ------------------------------------------------------------------- ---
    function initialize() {
        if (document.getElementById(CONFIG.UI_CONTAINER_ID)) {
            logError('Prod Helper UI v2 is already initialized. Aborting.');
            return;
        }
        logInfo('Initializing Production Helper v2...');

        loadDataFromStorage(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è UI
        buildMainUI();         // –°—Ç—Ä–æ–∏–º UI

        // (–ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –∏ UI –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è, —ç—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ setInitialUIStates)
        // setInitialUIStates() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ buildMainUI –ø–æ—Å–ª–µ DOM-–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π

        updateRealTimeClockDisplay();
        updateStatisticsAndGraph();   // –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        updateNotesHistoryDisplay();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫

        state.intervals.realTimeClock = setInterval(updateRealTimeClockDisplay, 1000);
        state.intervals.statisticsAndGraph = setInterval(updateStatisticsAndGraph, CONFIG.STATS_UPDATE_INTERVAL_MS);

        if (state.autoClickEnabled) {
            initializeMutationObserver();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PageDown
        state.pageKeydownListener = handlePageKeydown; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è removeEventListener
        document.addEventListener('keydown', state.pageKeydownListener);

        window.addEventListener('beforeunload', saveDataToStorage);
        window.productionHelperV2Initialized = true;
        logInfo('Production Helper v2 initialized successfully.');
    }

    function destroy() { // –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏" –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        logInfo('Destroying Production Helper v2...');
        saveDataToStorage();
        if (state.mutationObserver) state.mutationObserver.disconnect();
        Object.values(state.intervals).forEach(clearInterval);
        if (state.domElements.uiContainer) state.domElements.uiContainer.remove();
        if (state.domElements.emergencyShowButton) state.domElements.emergencyShowButton.remove();
        if(state.pageKeydownListener) document.removeEventListener('keydown', state.pageKeydownListener);

        window.removeEventListener('beforeunload', saveDataToStorage);
        delete window.productionHelperV2Initialized;
        logInfo('Production Helper v2 destroyed.');
    }

    // --- –ó–∞–ø—É—Å–∫ ---
    if (window.productionHelperV2Initialized) {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞, –º–æ–∂–Ω–æ –µ–µ "—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å"
        // if(typeof window.destroyProductionHelperV1 === 'function') window.destroyProductionHelperV1();
        // –ê –∑–∞—Ç–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π.
        // –ù–æ —Ç.–∫. —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
        logError("Prod Helper v2: Attempting to initialize again, but a version (or this one) might be running.");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: return; –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –∑–∞—Ç–∏—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é.
        // –ù–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å destroy() –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ initialize() –Ω–æ–≤–æ–π.
        // if (typeof window.destroyProductionHelperV2 === 'function') window.destroyProductionHelperV2();
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é destroy –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    window.destroyProductionHelperV2 = destroy;


    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ document.readyState –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω–µ–¥—Ä—è–µ—Ç—Å—è –æ—á–µ–Ω—å —Ä–∞–Ω–æ
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initialize();
    } else {
        document.addEventListener('DOMContentLoaded', initialize, { once: true });
    }

})();
